/*
=== Поиск анаграмм по словарю ===

Напишите функцию поиска всех множеств анаграмм по словарю.
Например:
'пятак', 'пятка' и 'тяпка' - принадлежат одному множеству,
'листок', 'слиток' и 'столик' - другому.

Входные данные для функции: ссылка на массив - каждый элемент которого - слово на русском языке в кодировке utf8.
Выходные данные: Ссылка на мапу множеств анаграмм.
Ключ - первое встретившееся в словаре слово из множества
Значение - ссылка на массив, каждый элемент которого, слово из множества. Массив должен быть отсортирован по возрастанию.
Множества из одного элемента не должны попасть в результат.
Все слова должны быть приведены к нижнему регистру.
В результате каждое слово должно встречаться только один раз.

Программа должна проходить все тесты. Код должен проходить проверки go vet и golint.
*/

package main

import (
	"sort"
	"strings"
)

// findAnagrams находит все множества анаграмм в данном словаре.
func findAnagrams(words []string) map[string][]string {
	anagramSets := make(map[string][]string)

	// Создаем карту для хранения отсортированных анаграмм
	anagramsMap := make(map[string][]string)

	for _, word := range words {
		// Приводим слово к нижнему регистру
		word = strings.ToLower(word)

		// Создаем "ключ" для слова, который будет отсортированной версией букв в нем
		sortedWord := sortString(word)

		// Добавляем слово в соответствующее множество анаграмм
		anagramsMap[sortedWord] = append(anagramsMap[sortedWord], word)
	}

	// Проходим по карте анаграмм и сохраняем множества анаграмм в результирующую карту
	for _, anagrams := range anagramsMap {
		// Если множество анаграмм содержит более одного слова, добавляем его в результат
		if len(anagrams) > 1 {
			// Сортируем множество анаграмм по алфавиту
			sort.Strings(anagrams)

			// Добавляем множество анаграмм в результирующую карту
			anagramSets[anagrams[0]] = anagrams
		}
	}

	return anagramSets
}

// sortString сортирует символы в строке и возвращает отсортированную строку.
func sortString(s string) string {
	chars := strings.Split(s, "")
	sort.Strings(chars)
	return strings.Join(chars, "")
}
